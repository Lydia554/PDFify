const express = require("express");
const puppeteer = require("puppeteer");
const path = require("path");
const router = express.Router();
const fs = require("fs");
const authenticate = require("../middleware/authenticate");
const User = require("../models/User");
const pdfParse = require("pdf-parse");

const log = (message, data = null) => {
Â  if (process.env.NODE_ENV !== "production") {
Â  Â  console.log(message, data);
Â  }
};


function generateInvoiceHTML(data) {
  const items = Array.isArray(data.items) ? data.items : [];

Â  const logoUrl = data.customLogoUrl || "https://pdf-api.portfolio.lidija-jokic.com/images/Logo.png";



Â  return `
Â  Â  <html>
Â  Â  Â  <head>
<style>
Â  @import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap');
Â  body {
Â  Â  font-family: 'Open Sans', sans-serif;
Â  Â  color: #333;
Â  Â  background: #f4f7fb;
Â  Â  margin: 0;
Â  Â  padding: 0;
Â  Â  min-height: 100vh;
Â  Â  position: relative;
Â  }
Â  .container {
Â  Â  max-width: 800px;
Â  Â  margin: 50px auto;
Â  Â  padding: 30px 40px;
Â  Â  padding-bottom: 160px; /* extra space for footer */
Â  Â  background-color: #fff;
Â  Â  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
Â  Â  border-radius: 12px;
Â  }
Â  .logo {
Â  Â  width: 150px;
Â  Â  margin-bottom: 20px;
Â  }
Â  .logo:empty {
Â  Â  display: none;
Â  }
Â  h1 {
Â  Â  font-size: 28px;
Â  Â  color: #2a3d66;
Â  Â  text-align: center;
Â  Â  margin: 20px 0;
Â  Â  letter-spacing: 1px;
Â  }
Â  .invoice-header {
Â  Â  display: flex;
Â  Â  justify-content: space-between;
Â  Â  align-items: flex-start;
Â  Â  border-bottom: 2px solid #2a3d66;
Â  Â  padding-bottom: 20px;
Â  Â  margin-bottom: 30px;
Â  }
Â  .invoice-header .left,
Â  .invoice-header .right {
Â  Â  font-size: 16px;
Â  Â  line-height: 1.5;
Â  }
Â  .invoice-header .right {
Â  Â  text-align: right;
Â  Â  color: #777;
Â  }
Â  .table {
Â  Â  width: 100%;
Â  Â  border-collapse: collapse;
Â  Â  margin-bottom: 20px;
Â  }
Â  .table th,
Â  .table td {
Â  Â  padding: 12px;
Â  Â  border: 1px solid #ddd;
Â  Â  text-align: left;
Â  }
Â  .table th {
Â  Â  background-color: #eaf0fb;
Â  Â  color: #2a3d66;
Â  Â  font-weight: 600;
Â  }
Â  .table td {
Â  Â  color: #444;
Â  }
Â  .table tr:nth-child(even) td {
Â  Â  background-color: #f9fbff;
Â  }
Â  .table tfoot td {
Â  Â  background-color: #eaf0fb;
Â  Â  font-weight: bold;
Â  }
Â  .total {
Â  Â  text-align: right;
Â  Â  font-size: 18px;
Â  Â  font-weight: bold;
Â  Â  color: #2a3d66;
Â  Â  margin-top: 10px;
Â  }
Â  .chart-container {
Â  Â  text-align: center;
Â  Â  margin: 40px 0 20px;
Â  }
Â  .chart-container h2 {
Â  Â  font-size: 18px;
Â  Â  color: #2a3d66;
Â  Â  margin-bottom: 10px;
Â  }
Â  @media (max-width: 768px) {
Â  Â  .container {
Â  Â  Â  margin: 20px auto;
Â  Â  Â  padding: 20px;
Â  Â  Â  padding-bottom: 160px; /* keep footer space on mobile too */
Â  Â  }
Â  Â  .invoice-header {
Â  Â  Â  flex-direction: column;
Â  Â  Â  text-align: left;
Â  Â  }
Â  Â  .invoice-header .right {
Â  Â  Â  text-align: left;
Â  Â  }
Â  Â  h1 {
Â  Â  Â  font-size: 22px;
Â  Â  }
Â  Â  .total {
Â  Â  Â  font-size: 16px;
Â  Â  }
Â  Â  .chart-container h2 {
Â  Â  Â  font-size: 16px;
Â  Â  }
Â  }
Â  .footer {
Â  Â  position: static; /* flow naturally below content */
Â  Â  max-width: 800px;
Â  Â  margin: 120px auto 40px auto; /* spacing above and below footer, centered */
Â  Â  padding: 10px 20px;
Â  Â  background-color: #f9f9f9;
Â  Â  color: #444;
Â  Â  border-top: 1px solid #ccc;
Â  Â  text-align: center;
Â  Â  line-height: 1.6;
Â  Â  font-size: 11px;
Â  Â  border-radius: 0 0 12px 12px;
Â  Â  box-sizing: border-box;
Â  Â  z-index: auto;
Â  }
Â  .footer p {
Â  Â  margin: 6px 0;
Â  }
Â  .footer a {
Â  Â  color: #0073e6;
Â  Â  text-decoration: none;
Â  Â  word-break: break-word;
Â  }
Â  .footer a:hover {
Â  Â  text-decoration: underline;
Â  }
</style>

Â  Â  Â  </head>
Â  Â  Â  <body>
Â  Â  Â  Â  <div class="container">
Â  Â  Â  Â  Â  ${(logoUrl && logoUrl !== "null") ? `<img src="${logoUrl}" alt="Company Logo" class="logo" />` : ""}

Â  Â  Â  Â  Â  <h1>Invoice for ${data.customerName}</h1>

Â  Â  Â  Â  Â  <div class="invoice-header">
Â  Â  Â  Â  Â  Â  <div class="left">
Â  Â  Â  Â  Â  Â  Â  <p><strong>Order ID:</strong> ${data.orderId}</p>
Â  Â  Â  Â  Â  Â  Â  <p><strong>Date:</strong> ${data.date}</p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div class="right">
Â  Â  Â  Â  Â  Â  Â  <p><strong>Customer:</strong><br>${data.customerName}</p>
Â  Â  Â  Â  Â  Â  Â  <p><strong>Email:</strong><br><a href="mailto:${data.customerEmail}">${data.customerEmail}</a></p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  <table class="table">
Â  Â  Â  Â  Â  Â  <thead>
Â  Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  Â  Â  <th>Item</th>
Â  Â  Â  Â  Â  Â  Â  Â  <th>Quantity</th>
Â  Â  Â  Â  Â  Â  Â  Â  <th>Price</th>
Â  Â  Â  Â  Â  Â  Â  Â  <th>Total</th>
Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  </thead>
Â  Â  Â  Â  Â <tbody>
  ${
    Array.isArray(items) 
      ? items.map(item => `
          <tr>
            <td>${item.name || ''}</td>
            <td>${item.quantity || ''}</td>
            <td>${item.price || ''}</td>
            <td>${item.total || ''}</td>
          </tr>
        `).join('')
      : `<tr><td colspan="4">No items available</td></tr>`
  }
</tbody>

Â  Â  Â  Â  Â  Â  <tfoot>
Â  Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  Â  Â  <td colspan="3">Subtotal</td>
Â  Â  Â  Â  Â  Â  Â  Â  <td>${data.subtotal}</td>
Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  Â  Â  <td colspan="3">Tax (21%)</td>
Â  Â  Â  Â  Â  Â  Â  Â  <td>${data.tax}</td>
Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  Â  Â  <td colspan="3">Total</td>
Â  Â  Â  Â  Â  Â  Â  Â  <td>${data.total}</td>
Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  </tfoot>
Â  Â  Â  Â  Â  </table>

Â  Â  Â  Â  Â  <div class="total">
Â  Â  Â  Â  Â  Â  <p>Total Amount Due: ${data.total}</p>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  ${data.showChart ? `
Â  Â  Â  Â  Â  Â  <div class="chart-container">
Â  Â  Â  Â  Â  Â  Â  <h2>Breakdown</h2>
Â  Â  Â  Â  Â  Â  Â  <img src="https://quickchart.io/chart?c={
Â  Â  Â  Â  Â  Â  Â  Â  type:'pie',
Â  Â  Â  Â  Â  Â  Â  Â  data:{labels:['Subtotal','Tax'],datasets:[{data:[${data.subtotal.replace('â‚¬','')},${data.tax.replace('â‚¬','')}]}
Â  Â  Â  Â  Â  Â  Â  Â  ]}
Â  Â  Â  Â  Â  Â  Â  }" alt="Invoice Breakdown" style="max-width:300px;display:block;margin:auto;" />
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  ` : ''}
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <div class="footer">
Â  Â  Â  Â  Â  <p>Thanks for using our service!</p>
Â  Â  Â  Â  Â  <p>If you have questions, contact us at <a href="mailto:supportpdfifyapi@gmail.com">supportpdfifyapi@gmail.com</a>.</p>
Â  Â  Â  Â  Â  <p>&copy; 2025 ðŸ§¾PDFify â€” All rights reserved.</p> 
Â  Â  Â  Â  Â  <p>
Â  Â  Â  Â  Â  Â  Generated using <strong>PDFify</strong>. Visit 
Â  Â  Â  Â  Â  Â  <a href="https://pdf-api.portfolio.lidija-jokic.com/" target="_blank">our site</a> for more.
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  </div>
Â  Â  Â  </body>
Â  Â  </html>
Â  `;
}
router.post("/generate-invoice", authenticate, async (req, res) => {
  let { data, isPreview } = req.body;
  let invoiceData = data;

  try {
    // Make sure items is an array, parse if it's a JSON string
    if (typeof invoiceData.items === 'string') {
      try {
        invoiceData.items = JSON.parse(invoiceData.items);
      } catch {
        invoiceData.items = [];
      }
    }
    if (!Array.isArray(invoiceData.items)) {
      invoiceData.items = [];
    }

    const user = await User.findById(req.user.userId);
    if (!user) return res.status(404).json({ error: "User not found" });

    if (!user.isPremium) {
      invoiceData.customLogoUrl = null;
      invoiceData.showChart = false;
    }

    const pdfDir = path.join(__dirname, "../pdfs");
    if (!fs.existsSync(pdfDir)) {
      fs.mkdirSync(pdfDir, { recursive: true });
    }

    const pdfPath = path.join(pdfDir, `Invoice_${invoiceData.orderId}.pdf`);

    const browser = await puppeteer.launch({
      headless: true,
      args: ["--no-sandbox", "--disable-setuid-sandbox"],
    });

    const page = await browser.newPage();
    const html = generateInvoiceHTML(invoiceData);
    await page.setContent(html, { waitUntil: "networkidle0" });
    await page.pdf({ path: pdfPath, format: "A4" });
    await browser.close();

    const pdfBuffer = fs.readFileSync(pdfPath);
    const parsed = await pdfParse(pdfBuffer);
    const pageCount = parsed.numpages;

    console.log(`User used ${pageCount} pages`);

    if (!isPreview) {
      if (user.usageCount + pageCount > user.maxUsage) {
        fs.unlinkSync(pdfPath);
        return res.status(403).json({
          error: "Monthly usage limit reached. Upgrade to premium for more pages.",
        });
      }

      user.usageCount += pageCount;
      await user.save();
    }

    res.download(pdfPath, (err) => {
      if (err) console.error("Error sending file:", err);
      fs.unlinkSync(pdfPath);
    });
  } catch (error) {
    console.error("Error during PDF generation:", error);
    res.status(500).json({ error: "PDF generation failed" });
  }
});


module.exports = router;
